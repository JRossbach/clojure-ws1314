cmdhistory=["\\r\\n(select autor)" "(-> (select* autor)\\r\\n        (with titel)\\r\\n        (as-sql))" "(-> (select* titel)\\r\\n    (with autor)\\r\\n    (as-sql))" "(text field_database_host)" "(text\! field_database_host \\"Das ist Magie\!\\")" "(show field_database_host)" "(show-options field_database_host)" "(show-options frame_database)" "(show-options main_panel)" "main_panel" "(show-options (frame))" "(show-options frame_main)" "(show-options frame)" "(show-options frame_database)" "(ClojureProject.lit_i18n/i18n text_add_autor)" "(ClojureProject.lit_i18n/i18n \:text_add_autor)" "(international/i18n \:text_add_autor)" "(i18n/i18n \:text_add_autor)" "(test/i18n \:text_frame_main_title)" "(labels/i18n \:text_frame_main_title)" "(labels/i18n \:test)" "(ClojureProject.lit_i18n \:test)" "(ClojureProject.lit_i18n/i18n \:test)" "(ClojureProject.lit_i18n/i18n \:text_frame_main_title)" "(ClojureProject.lit_i18n/i18n \:text_add_autor)" " (ClojureProject.lit_i18n/i18n \:text_frame_main_title)" "(ClojureProject.lit_i18n/i18n \:text_frame_main_title)" "\=> (ClojureProject.lit_i18n/i18n \:text_frame_main_title)" "(ClojureProject.lit_i18n/i18n \:text_frame_main_title)" "(ClojureProject.lit_i18n/i18n \:text_menubar_database_main_title)" "(ClojureProject.lit_control/saveConfiguration \\"test\\")" "(ClojureProject.lit_control/saveConfiguration [\\"a\\" \\"b\\" \\"c\\"])" "(config field_database_host \:text)" "  (config\! field_add_titel \:text \\"test\\")" "(config\! field_add_titel \:text \\"test\\")" "(config field_database_host \:text)" "(ClojureProject.lit_control/saveConfiguration \\"test\\")" "(config field_database_host \:text)" "  (ClojureProject.lit_control/saveConfiguration [(config field_database_host \:text)\\r\\n                                                 (config field_database_name \:text)\\r\\n                                                 (config field_database_username \:text)\\r\\n                                                 (config field_database_password \:text)])" "(selectTitle)" "(selectTitle {\:name \\"Rechnernetze\\"})" "(selectTitle {\:name [like \\"nerne\\"]})" "(connectDatabase)" "(ClojureProject.lit_data/connectDatabase \\"clojureProjekt\\" \\"localhost\\" \\"user\\" \\"\\")" "(defdb mySQLDatabase (mysql {\:db \\"clojureprojekt\\" \:host \\"localhost\\" \:user \\"root\\" \:password \\"\\"}))" "(ClojureProject.lit_data/connectDatabase \\"clojureprojekt\\" \\"localhost\\" \\"root\\" \\"\\")" "(ClojureProject.lit_data/selectTitle)" "(ClojureProject.lit_data/selectPublisher)" "(ClojureProject.lit_data selectTitle)" "(ClojureProject.lit_data/selectTitle)" "\\n(ClojureProject.lit_data/selectTitle {\:name Rechnernetze \:isbn 3-8348-2296-5 \:author Alexander Nadler \:publisher_id 1})" "\\n(ClojureProject.lit_data/selectTitle {\:name \\"Rechnernetze\\" \:isbn \\"3-8348-2296-5\\" \:author \\"Alexander Nadler\\" \:publisher_id \\"1\\"})" "(ClojureProject.lit_data/selectTitle {\:name Rechnernetze \:isbn 3-8348-2296-5 \:author \\"Alexander Nadler\\" \:publisher_id 1})" "ClojureProject.lit_data/selectTitle {\:name \\"Hans\\"}" "(ClojureProject.lit_data/selectTitle {\:name \\"Hans\\"})" "(ClojureProject.lit_data/selectTitle)" "(ClojureProject.lit_data/selectTitle {\:name \\"Hans\\"})" "(ClojureProject.lit_data/selectTitle \:name \\"Daten\\")" "(ClojureProject.lit_data/selectTitle {\:isbn \\"0\\" \:name \\"Daten\\" \:author \\"Hans\\"})" "(ClojureProject.lit_data/selectTitle {\:name Datenbank})" "(ClojureProject.lit_data/selectTitle {\:name \\"Daten\\"})" "(ClojureProject.lit_data/selectTitle {\:name \\"Datenbanken\\"\\n                                      })" "(ClojureProject.lit_data/selectTitle {\:name Grundlagen der Informatik \:isbn 978-3-8348-2296-3 \:author Julian Rossbach})" "(ClojureProject.lit_data/selectTitle {\:name \\"Grundlagen der Informatik\\" \:isbn 978-3-8348-2296-3 \:author \\"Julian Rossbach\\"\\n                                      })" "(ClojureProject.lit_data/selectTitle {\:name \\"Grundlagen der Informatik\\" \:isbn \\"978-3-8348-2296-3\\" \:author \\"Julian Rossbach\\"})" "result" "(def result {\:publisher_id 0, \:author \\"Alexander Nadler\\", \:isbn \\"978-3-86894-111-1\\", \:name \\"Projektmanagement\\", \:id 5})" "result" "(defn getResultTableHead \\r\\n  [result] (keys (get result 0)))" "(getResultTableHead result)" "(def result [{\:publisher_id 0, \:author \\"Alexander Nadler\\", \:isbn \\"978-3-86894-111-1\\", \:name \\"Projektmanagement\\", \:id 5}])" "(getResultTableHead result)" "(defn getResultTableHead \\r\\n  [result] (apply (keys (get result 0))))" "(getResultTableHead result)" "(defn getResultTableHead \\r\\n  [result] (apply (str (keys (get result 0)))))" "(getResultTableHead result)" "(defn getResultTableHead \\r\\n  [result] (apply str (keys (get result 0))))" "(getResultTableHead result)" "(defn getResultTableHead \\r\\n  [result] (keys (get result 0)))" "(getResultTableHead result)" "(defn getResultTableHead \\r\\n  [result]  (map list (keys (get result 0))))" "(getResultTableHead result)" "(type (getResultTableHead result))" "\\r\\n(defn getResultTableHead \\r\\n  [result]  (map list (keys (get result 0)) (keys (get result 0))))" "(getResultTableHead result)" "(defn getResultTableHead \\r\\n  [result]  (doseq [key text] (map list (keys (get result 0)) (keys (get result 0))\\r\\n                                   (map (key (str text))))))" "(defn getResultTableHead \\r\\n  [result]  (doseq [[key text] (map list (keys (get result 0)) (keys (get result 0)))] []\\r\\n                                    (map (key (str text))))" "(defn getResultTableHead \\r\\n  [result]  (doseq [[key text] (map list (keys (get result 0)) (keys (get result 0)))] []\\r\\n                                    (map (key (str text)))))" "(getResultTableHead result)" "\\r\\n(defn getResultTableHead \\r\\n  [result] (doseq [[key text] (map list (keys (get result 0)) (keys (get result 0)))]\\r\\n                                   (map (key (str text)))))" "(getResultTableHead result)" "(defn getResultTableHead \\r\\n  [result] (doseq [[key text] (map list (keys (get result 0)) (keys (get result 0)))]\\r\\n                                   (key (str text))))" "(getResultTableHead result)" "\\r\\n(defn getResultTableHead \\r\\n  [result] (map list (keys (get result 0)) (keys (get result 0))))" "(getResultTableHead result)" "\\r\\n(defn getResultTableHead \\r\\n  [result] (map map (keys (get result 0)) (keys (get result 0))))" "(getResultTableHead result)" "\\r\\n(defn getResultTableHead \\r\\n  [result] (map map (keys (get result 0)) (str (keys (get result 0)))))" "(getResultTableHead result)" "\\r\\n(defn getResultTableHead \\r\\n  [result] (map map (keys (get result 0)) (keys (get result 0))))" "(getResultTableHead result)" "\\r\\n(defn getResultTableHead \\r\\n  [result] (map list (keys (get result 0)) (keys (get result 0))))" "(getResultTableHead result)" "\\r\\n(defn getResultTableHead \\r\\n  [result] (map list (keys (get result 0)) (str (keys (get result 0)))))" "(getResultTableHead result)" "\\r\\n(defn getResultTableHead \\r\\n  [result] (map list \\r\\n                (keys (get result 0)) \\r\\n                (keys (get result 0))))" "(getResultTableHead result)" "\\r\\n(defn getResultTableHead \\r\\n  [result] (map list \\r\\n                (keys (get result 0)) \\r\\n                (apply str (keys (get result 0)))))" "(getResultTableHead result)" "\\r\\n(defn getResultTableHead \\r\\n  [result] (apply (keys (get result 0))))" "(getResultTableHead result)" "\\r\\n\\r\\n(defn getResultTableHead \\r\\n  [result] (apply println (keys (get result 0))))" "(getResultTableHead result)" "\\r\\n(defn getResultTableHead \\r\\n  [result] (apply map (keys (get result 0))))" "(getResultTableHead result)" "\\r\\n(defn getResultTableHead \\r\\n  [result] (apply (map % (str %)) (keys (get result 0))))" "\\r\\n(defn getResultTableHead \\r\\n  [result]\\r\\n  (map \#(apply %) (keys (get result 0))))" "(getResultTableHead result)" "\\r\\n(defn getResultTableHead \\r\\n  [result] (apply (map % (str %)) (keys (get result 0))))" "\\r\\n\\r\\n(defn getResultTableHead \\r\\n  [result] \#(apply (map % (str %)) (keys (get result 0))))" "(getResultTableHead result)" "\\r\\n(defn getResultTableBody \\r\\n  [result] (apply vec (vals result)))" "(getResultTableBody result)" "(vals result)" "result" "(vals (first result))" "(vec (vals (first result)))" "\\r\\n(defn getResultTableBody \\r\\n  [result] (apply (vec (vals)) result))" "(getResultTableBody result)" "(defn getResultTableBody \\r\\n  [result] (apply vec result))" "(getResultTableBody result)" "\\r\\n\\r\\n(defn getResultTableBody \\r\\n  [result] (apply vec (vals result)))" "(getResultTableBody result)" "(vals result)" "\\r\\n(defn getResultTableBody \\r\\n  [result] (apply vals result))" "(getResultTableBody result)" "(def result [{\:publisher_id 0, \:author \\"Alexander Nadler\\", \:isbn \\"978-3-86894-111-1\\", \:name \\"Projektmanagement\\", \:id 5}{\:publisher_id 0, \:author \\"Alexander Nadler\\", \:isbn \\"978-3-86894-111-1\\", \:name \\"Projektmanagement\\", \:id 5}])" "(getResultTableBody result)" "result" "(apply result)" "(apply vals result)" "(apply println result)" "(apply vals result)" "(apply keys result)" "(vec (vals (first result)))" "\\r\\n(defn test [t] \\r\\n  (println t))" "\\r\\n(defn getResultTableBody \\r\\n  [result] (apply test result))" "(getResultTableBody result)" "\\r\\n(for [x result] (println x))" "\\r\\n(defn getResultTableBody \\r\\n  [result] (for [record result] (vals record)))" "(getResultTableBody result)" "(keys (first result))" "(def result [{\:publisher_id 0, \:author \\"Alexander Nadler\\", \:isbn \\"978-3-86894-111-1\\", \:name \\"Projektmanagement\\", \:id 5}])" "result" "\\r\\n(defn getResultTableHead \\r\\n  [result] [{\:key \:author, \:text \\"Author\\"}\\r\\n            {\:key \:name, \:text \\"Name\\"}\\r\\n            {\:key \:publisher_id, \:text \\"PublisherID\\"}\\r\\n            {\:key \:isbn, \:text \\"ISBN\\"}\\r\\n            {\:key \:id, \:text \\"ID\\"}])" "(getResultTableHead result)" "\\r\\n(defn getResultTableBody \\r\\n  [result] (for [record result] (vec (vals record))))" "(getResultTableBody result)" "\\r\\n\\r\\n(defn getResultTableBody \\r\\n  [result] (for [record result] (vals record)))" "(getResultTableBody result)" "\\r\\n(defn getResultTableBody \\r\\n  [result] (vec (for [record result] (vec (vals record)))))" "(getResultTableBody result)"]
eclipse.preferences.version=1
