cmdhistory=["\\r\\n(select autor)" "(-> (select* autor)\\r\\n        (with titel)\\r\\n        (as-sql))" "(-> (select* titel)\\r\\n    (with autor)\\r\\n    (as-sql))" "(text field_database_host)" "(text\! field_database_host \\"Das ist Magie\!\\")" "(show field_database_host)" "(show-options field_database_host)" "(show-options frame_database)" "(show-options main_panel)" "main_panel" "(show-options (frame))" "(show-options frame_main)" "(show-options frame)" "(show-options frame_database)" "(ClojureProject.lit_i18n/i18n text_add_autor)" "(ClojureProject.lit_i18n/i18n \:text_add_autor)" "(international/i18n \:text_add_autor)" "(i18n/i18n \:text_add_autor)" "(test/i18n \:text_frame_main_title)" "(labels/i18n \:text_frame_main_title)" "(labels/i18n \:test)" "(ClojureProject.lit_i18n \:test)" "(ClojureProject.lit_i18n/i18n \:test)" "(ClojureProject.lit_i18n/i18n \:text_frame_main_title)" "(ClojureProject.lit_i18n/i18n \:text_add_autor)" " (ClojureProject.lit_i18n/i18n \:text_frame_main_title)" "(ClojureProject.lit_i18n/i18n \:text_frame_main_title)" "\=> (ClojureProject.lit_i18n/i18n \:text_frame_main_title)" "(ClojureProject.lit_i18n/i18n \:text_frame_main_title)" "(ClojureProject.lit_i18n/i18n \:text_menubar_database_main_title)" "(ClojureProject.lit_control/saveConfiguration \\"test\\")" "(ClojureProject.lit_control/saveConfiguration [\\"a\\" \\"b\\" \\"c\\"])" "(config field_database_host \:text)" "  (config\! field_add_titel \:text \\"test\\")" "(config\! field_add_titel \:text \\"test\\")" "(config field_database_host \:text)" "(ClojureProject.lit_control/saveConfiguration \\"test\\")" "(config field_database_host \:text)" "  (ClojureProject.lit_control/saveConfiguration [(config field_database_host \:text)\\r\\n                                                 (config field_database_name \:text)\\r\\n                                                 (config field_database_username \:text)\\r\\n                                                 (config field_database_password \:text)])" "(selectTitle)" "(selectTitle {\:name \\"Rechnernetze\\"})" "(selectTitle {\:name [like \\"nerne\\"]})" "(connectDatabase)" "(ClojureProject.lit_data/connectDatabase \\"clojureProjekt\\" \\"localhost\\" \\"user\\" \\"\\")" "(defdb mySQLDatabase (mysql {\:db \\"clojureprojekt\\" \:host \\"localhost\\" \:user \\"root\\" \:password \\"\\"}))" "(ClojureProject.lit_data/connectDatabase \\"clojureprojekt\\" \\"localhost\\" \\"root\\" \\"\\")" "(ClojureProject.lit_data/selectTitle)" "(ClojureProject.lit_data/selectPublisher)" "(ClojureProject.lit_data selectTitle)" "(ClojureProject.lit_data/selectTitle)" "\\n(ClojureProject.lit_data/selectTitle {\:name Rechnernetze \:isbn 3-8348-2296-5 \:author Alexander Nadler \:publisher_id 1})" "\\n(ClojureProject.lit_data/selectTitle {\:name \\"Rechnernetze\\" \:isbn \\"3-8348-2296-5\\" \:author \\"Alexander Nadler\\" \:publisher_id \\"1\\"})" "(ClojureProject.lit_data/selectTitle {\:name Rechnernetze \:isbn 3-8348-2296-5 \:author \\"Alexander Nadler\\" \:publisher_id 1})" "ClojureProject.lit_data/selectTitle {\:name \\"Hans\\"}" "(ClojureProject.lit_data/selectTitle {\:name \\"Hans\\"})" "(ClojureProject.lit_data/selectTitle)" "(ClojureProject.lit_data/selectTitle {\:name \\"Hans\\"})" "(ClojureProject.lit_data/selectTitle \:name \\"Daten\\")" "(ClojureProject.lit_data/selectTitle {\:isbn \\"0\\" \:name \\"Daten\\" \:author \\"Hans\\"})" "(ClojureProject.lit_data/selectTitle {\:name Datenbank})" "(ClojureProject.lit_data/selectTitle {\:name \\"Daten\\"})" "(ClojureProject.lit_data/selectTitle {\:name \\"Datenbanken\\"\\n                                      })" "(ClojureProject.lit_data/selectTitle {\:name Grundlagen der Informatik \:isbn 978-3-8348-2296-3 \:author Julian Rossbach})" "(ClojureProject.lit_data/selectTitle {\:name \\"Grundlagen der Informatik\\" \:isbn 978-3-8348-2296-3 \:author \\"Julian Rossbach\\"\\n                                      })" "(ClojureProject.lit_data/selectTitle {\:name \\"Grundlagen der Informatik\\" \:isbn \\"978-3-8348-2296-3\\" \:author \\"Julian Rossbach\\"})" "result" "(def result {\:publisher_id 0, \:author \\"Alexander Nadler\\", \:isbn \\"978-3-86894-111-1\\", \:name \\"Projektmanagement\\", \:id 5})" "result" "(defn getResultTableHead \\r\\n  [result] (keys (get result 0)))" "(getResultTableHead result)" "(def result [{\:publisher_id 0, \:author \\"Alexander Nadler\\", \:isbn \\"978-3-86894-111-1\\", \:name \\"Projektmanagement\\", \:id 5}])" "(getResultTableHead result)" "(defn getResultTableHead \\r\\n  [result] (apply (keys (get result 0))))" "(getResultTableHead result)" "(defn getResultTableHead \\r\\n  [result] (apply (str (keys (get result 0)))))" "(getResultTableHead result)" "(defn getResultTableHead \\r\\n  [result] (apply str (keys (get result 0))))" "(getResultTableHead result)" "(defn getResultTableHead \\r\\n  [result] (keys (get result 0)))" "(getResultTableHead result)" "(defn getResultTableHead \\r\\n  [result]  (map list (keys (get result 0))))" "(getResultTableHead result)" "(type (getResultTableHead result))" "\\r\\n(defn getResultTableHead \\r\\n  [result]  (map list (keys (get result 0)) (keys (get result 0))))" "(getResultTableHead result)" "(defn getResultTableHead \\r\\n  [result]  (doseq [key text] (map list (keys (get result 0)) (keys (get result 0))\\r\\n                                   (map (key (str text))))))" "(defn getResultTableHead \\r\\n  [result]  (doseq [[key text] (map list (keys (get result 0)) (keys (get result 0)))] []\\r\\n                                    (map (key (str text))))" "(defn getResultTableHead \\r\\n  [result]  (doseq [[key text] (map list (keys (get result 0)) (keys (get result 0)))] []\\r\\n                                    (map (key (str text)))))" "(getResultTableHead result)" "\\r\\n(defn getResultTableHead \\r\\n  [result] (doseq [[key text] (map list (keys (get result 0)) (keys (get result 0)))]\\r\\n                                   (map (key (str text)))))" "(getResultTableHead result)" "(defn getResultTableHead \\r\\n  [result] (doseq [[key text] (map list (keys (get result 0)) (keys (get result 0)))]\\r\\n                                   (key (str text))))" "(getResultTableHead result)" "\\r\\n(defn getResultTableHead \\r\\n  [result] (map list (keys (get result 0)) (keys (get result 0))))" "(getResultTableHead result)" "\\r\\n(defn getResultTableHead \\r\\n  [result] (map map (keys (get result 0)) (keys (get result 0))))" "(getResultTableHead result)" "\\r\\n(defn getResultTableHead \\r\\n  [result] (map map (keys (get result 0)) (str (keys (get result 0)))))" "(getResultTableHead result)" "\\r\\n(defn getResultTableHead \\r\\n  [result] (map map (keys (get result 0)) (keys (get result 0))))" "(getResultTableHead result)" "\\r\\n(defn getResultTableHead \\r\\n  [result] (map list (keys (get result 0)) (keys (get result 0))))" "(getResultTableHead result)" "\\r\\n(defn getResultTableHead \\r\\n  [result] (map list (keys (get result 0)) (str (keys (get result 0)))))" "(getResultTableHead result)" "\\r\\n(defn getResultTableHead \\r\\n  [result] (map list \\r\\n                (keys (get result 0)) \\r\\n                (keys (get result 0))))" "(getResultTableHead result)" "\\r\\n(defn getResultTableHead \\r\\n  [result] (map list \\r\\n                (keys (get result 0)) \\r\\n                (apply str (keys (get result 0)))))" "(getResultTableHead result)" "\\r\\n(defn getResultTableHead \\r\\n  [result] (apply (keys (get result 0))))" "(getResultTableHead result)" "\\r\\n\\r\\n(defn getResultTableHead \\r\\n  [result] (apply println (keys (get result 0))))" "(getResultTableHead result)" "\\r\\n(defn getResultTableHead \\r\\n  [result] (apply map (keys (get result 0))))" "(getResultTableHead result)" "\\r\\n(defn getResultTableHead \\r\\n  [result] (apply (map % (str %)) (keys (get result 0))))" "\\r\\n(defn getResultTableHead \\r\\n  [result]\\r\\n  (map \#(apply %) (keys (get result 0))))" "(getResultTableHead result)" "\\r\\n(defn getResultTableHead \\r\\n  [result] (apply (map % (str %)) (keys (get result 0))))" "\\r\\n\\r\\n(defn getResultTableHead \\r\\n  [result] \#(apply (map % (str %)) (keys (get result 0))))" "(getResultTableHead result)" "\\r\\n(defn getResultTableBody \\r\\n  [result] (apply vec (vals result)))" "(getResultTableBody result)" "(vals result)" "result" "(vals (first result))" "(vec (vals (first result)))" "\\r\\n(defn getResultTableBody \\r\\n  [result] (apply (vec (vals)) result))" "(getResultTableBody result)" "(defn getResultTableBody \\r\\n  [result] (apply vec result))" "(getResultTableBody result)" "\\r\\n\\r\\n(defn getResultTableBody \\r\\n  [result] (apply vec (vals result)))" "(getResultTableBody result)" "(vals result)" "\\r\\n(defn getResultTableBody \\r\\n  [result] (apply vals result))" "(getResultTableBody result)" "(def result [{\:publisher_id 0, \:author \\"Alexander Nadler\\", \:isbn \\"978-3-86894-111-1\\", \:name \\"Projektmanagement\\", \:id 5}{\:publisher_id 0, \:author \\"Alexander Nadler\\", \:isbn \\"978-3-86894-111-1\\", \:name \\"Projektmanagement\\", \:id 5}])" "(getResultTableBody result)" "result" "(apply result)" "(apply vals result)" "(apply println result)" "(apply vals result)" "(apply keys result)" "(vec (vals (first result)))" "\\r\\n(defn test [t] \\r\\n  (println t))" "\\r\\n(defn getResultTableBody \\r\\n  [result] (apply test result))" "(getResultTableBody result)" "\\r\\n(for [x result] (println x))" "\\r\\n(defn getResultTableBody \\r\\n  [result] (for [record result] (vals record)))" "(getResultTableBody result)" "(keys (first result))" "(def result [{\:publisher_id 0, \:author \\"Alexander Nadler\\", \:isbn \\"978-3-86894-111-1\\", \:name \\"Projektmanagement\\", \:id 5}])" "result" "\\r\\n(defn getResultTableHead \\r\\n  [result] [{\:key \:author, \:text \\"Author\\"}\\r\\n            {\:key \:name, \:text \\"Name\\"}\\r\\n            {\:key \:publisher_id, \:text \\"PublisherID\\"}\\r\\n            {\:key \:isbn, \:text \\"ISBN\\"}\\r\\n            {\:key \:id, \:text \\"ID\\"}])" "(getResultTableHead result)" "\\r\\n(defn getResultTableBody \\r\\n  [result] (for [record result] (vec (vals record))))" "(getResultTableBody result)" "\\r\\n\\r\\n(defn getResultTableBody \\r\\n  [result] (for [record result] (vals record)))" "(getResultTableBody result)" "\\r\\n(defn getResultTableBody \\r\\n  [result] (vec (for [record result] (vec (vals record)))))" "(getResultTableBody result)" "(defn date\\r\\n  \\"Constructs a date in the GMT timezone from the given year month and day\\"\\r\\n  [year month day] \\r\\n  (let [date (java.util.Calendar/getInstance)]\\r\\n    (. date set year month day)\\r\\n    (. date setTimeZone (java.util.TimeZone/getTimeZone \\"GMT\\"))\\r\\n    date))" "(date 2014 01 19)" "\#inst\\"2014-01-19\\"" "(new GregorianCalendar 2013 01 02)" "(new java.util.GregorianCalendar 2013 01 02)" "(def test (new java.util.GregorianCalendar 2013 01 02))" "test" "(. test setTimeZone (java.util.TimeZone/getTimeZone \\"GMT\\"))" "test" "(defn date\\r\\n  \\"Constructs a date in the GMT timezone from the given year month and day\\"\\r\\n  [year month day] \\r\\n  (let [date (java.util.Calendar/getInstance)]\\r\\n    (. date set year month day)\\r\\n    (. date setTimeZone (java.util.TimeZone/getTimeZone \\"GMT\\"))\\r\\n    date))" "(date 2014 )" "(date 2014 1 19)" "\#inst\\"2013-09-03\\"" "(defn date\\r\\n  \\"Constructs a date in the GMT timezone from the given year month and day\\"\\r\\n  [year month day] \\r\\n  (let [date (java.util.Calendar/getInstance)]\\r\\n    (. date set year month day 0 0 0)\\r\\n    (. date setTimeZone (java.util.TimeZone/getTimeZone \\"GMT\\"))\\r\\n    date))" "(date 2013 09 03)" "(date 2014 1 13)" "(java.util.TimeZone/getTimeZone \\"GMT\\")" "\#inst\\"2014-01-19\\"" "(defn date\\r\\n  \\"Constructs a date in the GMT timezone from the given year month and day\\"\\r\\n  [year month day] \\r\\n  (let [date (java.util.Calendar/getInstance)]\\r\\n    (. date set year month day 0 0 0 0)\\r\\n    (. date setTimeZone (java.util.TimeZone/getTimeZone \\"GMT\\"))\\r\\n    date))" "(date 2014 1 19)" "(defn date\\r\\n  \\"Constructs a date in the GMT timezone from the given year month and day\\"\\r\\n  [year month day] \\r\\n  (let [date (java.util.Calendar/getInstance)]\\r\\n    (. date set year month day 0 0 0 )\\r\\n    (. date setTimeZone (java.util.TimeZone/getTimeZone \\"GMT\\"))\\r\\n    date))" "(date 2014 1 19)" "(defn today\\r\\n  \\"Constructs a date in the GMT timezone from the given year month and day\\"\\r\\n  [] \\r\\n  (let [date (java.util.Calendar/getInstance)]\\r\\n    (. date setTimeZone (java.util.TimeZone/getTimeZone \\"GMT\\"))\\r\\n    date))" "(today)" "(defn after?\\r\\n  \\"Is date1 after date2?\\"\\r\\n  [date1 date2]\\r\\n  (let [dateOne (java.util.Calendar/getInstance)\\r\\n        dateTwo (java.util.Calendar/getInstance)]\\r\\n    (. dateOne setTime date1)\\r\\n    (. dateTwo setTime date2)\\r\\n    (if (> (- (. dateOne getTimeInMillis)(. dateTwo getTimeInMillis)) 0) true false)\\r\\n    date))" "(after? \#inst\\"2013-10-03\\" \#inst\\"2013-09-03\\")" "(defn after?\\r\\n  \\"Is date1 after date2?\\"\\r\\n  [date1 date2]\\r\\n  (let [dateOne (java.util.Calendar/getInstance)\\r\\n        dateTwo (java.util.Calendar/getInstance)]\\r\\n    (. dateOne setTime date1)\\r\\n    (. dateTwo setTime date2)\\r\\n    (if (> (- (. dateOne getTimeInMillis)(. dateTwo getTimeInMillis)) 0) true false)))" "(after? \#inst\\"2013-10-03\\" \#inst\\"2013-09-03\\")" "(after? \#inst\\"2013-8-03\\" \#inst\\"2013-09-03\\")" "(after? \#inst\\"2013-07-03\\" \#inst\\"2013-09-03\\")" "(defn date-string\\r\\n  \\"format the given date to a string with the given format scheme\\"\\r\\n  [date formatString]\\r\\n  (let [dateFormat (new java.text.SimpleDateFormat formatString)]\\r\\n    (. dateFormat format date)))" "(date-string \#inst\\"2013-09-03\\" \\"dd.MM.yyyy\\")" "(defn add\\r\\n  \\"modifes a date for the given key and value\\"\\r\\n  [& args] \\r\\n  (apply println args))" "(add \:key \\"test\\")" "(defn add\\r\\n  \\"modifes a date for the given key and value\\"\\r\\n  [date & args]\\r\\n  (println date)\\r\\n  (apply println args))" "(add \#inst\\"2013-01-01\\" \:month 1)" " (defn add\\r\\n  \\"modifes a date for the given key and value\\"\\r\\n  [dateObj key value]\\r\\n  (let [date (java.util.Calendar/getInstance)]\\r\\n    (. date setTime dateObj)\\r\\n    (cond (\= key \:years)(. date add java.util.Calendar/YEAR value)\\r\\n          (\= key \:months)(. date add java.util.Calendar/MONTH value)\\r\\n          (\= key \:days)(. date add java.util.Calendar/DAY_OF_MONTH value))))" "(add \#inst\\"2013-09-03\\" \:years 1)" "(def testDate \#inst\\"2013-09-03\\")" "(add testDate \:years 1)" "testDate" " (defn add\\r\\n  \\"modifes a date for the given key and value\\"\\r\\n  [dateObj key value]\\r\\n  (let [date (java.util.Calendar/getInstance)]\\r\\n    (. date setTime dateObj)\\r\\n    (cond (\= key \:years)(. date add java.util.Calendar/YEAR value)\\r\\n          (\= key \:months)(. date add java.util.Calendar/MONTH value)\\r\\n          (\= key \:days)(. date add java.util.Calendar/DAY_OF_MONTH value))\\r\\n    date))" "(add testDate \:years 1)" "(defrecord currency[short pre past precision])" "(def euro (currency \\"EUR\\" \\"Euro\\" \\"Cent\\" 2))" "(def euro (currency\: \\"EUR\\" \\"Euro\\" \\"Cent\\" 2))" "(def euro (currency. \\"EUR\\" \\"Euro\\" \\"Cent\\" 2))" "euro" "(defrecord amount[cur value])" "(def a1 (amount euro 100.00M))\\r\\n(def a2 (amount yen 1000M))" "(def a1 (amount. euro 100.00M))\\r\\n(def a2 (amount. yen 1000M))" "(def dollar (currency \\"USD\\" \\"Dollar\\" \\"Cent\\" 2))\\r\\n(def yen (currency \\"JPY\\" \\"Yen\\" \\"\\" 0))\\r\\n(def pound (currency \\"GBP\\" \\"Pound\\" \\"Pence\\" 2))" "(defrecord currency[short pre past precision])\\r\\n(defrecord amount[cur value])\\r\\n\\r\\n(def euro (currency. \\"EUR\\" \\"Euro\\" \\"Cent\\" 2))\\r\\n(def dollar (currency. \\"USD\\" \\"Dollar\\" \\"Cent\\" 2))\\r\\n(def yen (currency. \\"JPY\\" \\"Yen\\" \\"\\" 0))\\r\\n(def pound (currency. \\"GBP\\" \\"Pound\\" \\"Pence\\" 2))\\r\\n\\r\\n(def a1 (amount. euro 100.00M))\\r\\n(def a2 (amount. yen 1000M))" "a1" "(defn plus \\r\\n  \\"adds the two given amounts and create a new one\\"\\r\\n  [amountOne amountTwo]\\r\\n  (if (\!\= (cur amountOne)(cur amountTwo)) \\r\\n    (println \\"not valid, currencies are not equal\\")\\r\\n    (amount. (cur amountOne)(+ (value amountOne)(value amountOne)))))" "\\r\\n(defn plus \\r\\n  \\"adds the two given amounts and create a new one\\"\\r\\n  [amountOne amountTwo]\\r\\n  (if (not\= (cur amountOne)(cur amountTwo)) \\r\\n    (println \\"not valid, currencies are not equal\\")\\r\\n    (amount. (cur amountOne)(+ (value amountOne)(value amountOne)))))" "\\r\\n(defn plus \\r\\n  \\"adds the two given amounts and create a new one\\"\\r\\n  [amountOne amountTwo]\\r\\n  (if (not\= (\:cur amountOne)(\:cur amountTwo)) \\r\\n    (println \\"not valid, currencies are not equal\\")\\r\\n    (amount. (\:cur amountOne)(+ (\:value amountOne)(\:value amountOne)))))" "(plus a1 a1)" "(selectPublisher {\:id [\= 1]})" "(ClojureProject.lit_data/selectPublisher {\:id [\= 1]})" "(ClojureProject.lit_data/selectPublisher {\:id [like 1]})" "(ClojureProject.lit_data/selectPublisher {\:id 1})" "(ClojureProject.lit_data/selectPublisher)" "(ClojureProject.lit_data/selectPublisher {\:id [> 0]})" "(ClojureProject.lit_data/selectPublisher {\:id [> \\"0\\"]})" "(ClojureProject.lit_data/selectPublisher {\:name \\"Grotto\\"})" "(ClojureProject.lit_data/selectPublisher {\:id [\= (int 1)]})" "(ClojureProject.lit_data/selectPublisher {\:publisher_id [\= 1]})" "(ClojureProject.lit_data/selectPublisher)" "(ClojureProject.lit_data/selectPublisher {\:id 2})" "(ClojureProject.lit_data/selectPublisher {\:id \\"2\\"})" "(doc ClojureProject.lit_view/field_searchTitle_name)" "ClojureProject.lit_data/selectTitle" "(ClojureProject.lit_data/selectTitle)"]
eclipse.preferences.version=1
